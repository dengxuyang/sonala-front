{"version":3,"sources":["App.js","index.js"],"names":["arr","web3","SystemProgram","Object","values","kp","_keypair","secretKey","secret","Uint8Array","App","Keypair","fromSecretKey","PublicKey","idl","metadata","address","clusterApiUrl","useState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iXAWMA,GAHoBC,IAAlBC,cAGIC,OAAOC,OAAOC,EAAGC,SAASC,YAChCC,EAAS,IAAIC,WAAWT,GAoNfU,GAnNKT,IAAKU,QAAQC,cAAcJ,GAG7B,IAAIK,YAAUC,EAAIC,SAASC,SAG7BC,wBAAc,UAOlB,WAEV,MAA0CC,mBAAS,MAAnD,mBACA,GADA,UACoCA,mBAAS,KAA7C,mBACA,GADA,UAC8BA,mBAAS,KAAvC,4BAgMD,GCzNDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,Q","file":"static/js/main.d028faaf.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport {  Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst App = () => {\n  // state\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n  // const TEST_GIFS = [\n  //   \"https://media.giphy.com/media/RMwROj9Jlejf6vLkWS/giphy.gif\",\n  //   \"https://media.giphy.com/media/3o84sKzNzX59xb83Vm/giphy.gif\",\n  //   \"https://media.giphy.com/media/UkYA557fdMYTe/giphy.gif\",\n  //   \"https://media.giphy.com/media/RHJpTdvLD7hJ4W8jbD/giphy.gif\",\n  // ];\n  //actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        } else {\n          alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.error(\"Error creating BaseAccount account:\", error)\n    }\n  }\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n  const getGifList=async ()=>{\n    try {\n      const provider=getProvider()\n      const program=new Program(idl,programID,provider)\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      connect to Wallet\n    </button>\n  );\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n  if (gifList === null) {\n    return (\n      <div className=\"connected-container\">\n        <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n          Do One-Time Initialization For GIF Program Account\n        </button>\n      </div>\n    )\n  } \n  // Otherwise, we're good! Account exists. User can submit GIFs.\n  else {\n    return(\n      <div className=\"connected-container\">\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            sendGif();\n          }}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button type=\"submit\" className=\"cta-button submit-gif-button\">\n            Submit\n          </button>\n        </form>\n        <div className=\"gif-grid\">\n\t\t\t\t\t{/* We use index as the key instead, also, the src is now item.gifLink */}\n          {gifList.map((item, index) => (\n            <div className=\"gif-item\" key={index}>\n              <img src={item.gifLink} alt=\"gifLink\"/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n  };\n  // useEffect(() => {\n  //   const onLoad = async () => {\n  //     await checkIfWalletIsConnected();\n  //   };\n  //   window.addEventListener(\"load\", onLoad);\n  //   return () => window.removeEventListener(\"load\", onLoad);\n  // }, []);\n  // useEffect(() => {\n  //   if (walletAddress) {\n  //     console.log('Fetching GIF list...');\n      \n  //     // Call Solana program here.\n  //     getGifList()\n      \n    \n  //   }\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [walletAddress]);\n  // return (\n  //   <div className=\"App\">\n  //     <div className={walletAddress ? \"authed-container\" : \"container\"}>\n  //       <div className=\"header-container\">\n  //         <p className=\"header\">ðŸ’™IU</p>\n  //         <p className=\"sub-text\">\n  //           View your GIF collection in the metaverse âœ¨\n  //         </p>\n  //         {!walletAddress && renderNotConnectedContainer()}\n  //         {/* We just need to add the inverse here! */}\n  //         {walletAddress && renderConnectedContainer()}\n  //       </div>\n  //     </div>\n  //   </div>\n  // );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}